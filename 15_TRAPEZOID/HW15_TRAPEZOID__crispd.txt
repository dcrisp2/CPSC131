//AUTHOR:		DANIEL CRISP
//DATE:			11/15/2016
//DESC:			TRAPEZOID

QUESTION 1: CHAPTER 7 -- #8
MATLAB CODE:
rolldice.m
function [ data ] = rolldice( printresults, sides, dice, N )
	% rolldice simulates 'N' rolls of two fair dice. print results=true
	% will display textual output per roll, false will display results in
	% bar chart along with probabilities based on those rolls.

    % make printresults into something easier to use
    switch printresults
        case 'true'
            printIt = 1;
        case 'false'
            printIt = 0;
    end
    
	% Create randomized data for each roll of each dice.
    rng('shuffle'); %seed random number generator with time
	data = rand(N, dice);
	for i=1:N
		for j=1:dice
		data(i,j) = ceil(sides*data(i,j));
			if j == dice
					
				% Put sum of dice values into a new column at the given roll
				% index.
				data(i,dice+1) = sum(data(i,:));
			end
		end
	end
    
	% Create array num for holding number of times each possible side-total was rolled
	roll_sums(dice*1:dice*sides) = [0];
	
	% Add each time a roll-total was rolled to the correct element of 'num'.
	for i=1:N
		rollSum = data(i,dice+1);
		roll_sums(rollSum) = roll_sums(rollSum) + 1;
        if printIt==1 display_line( data(i,:)); end
    end
    
    if printIt==0 bar_prob(roll_sums, N); end
    
    fprintf('\n\n');
end

function display_line( data )
    %display_line takes an array. 2 nums 1:6, and their sum. and displays a
    %line of output.
    
    sum = data(3);

    str = string(sum);
    if sum==2
        str = 'snake eyes';
    elseif sum==3
        str = 'ace-deuce';
    elseif sum==11
        str = 'yo';
    elseif sum==12
        str = 'boxcars';
    elseif sum==7
        str = 'natural';
    elseif data(1)==data(2)
        if data(1)==2
            str = 'hard four';
        elseif data(1)==3
            str = 'hard six';
        end
    end
        
    fprintf('\nPlayer rolls a %i and a %i : %s',data(1),data(2),str);
end

function bar_prob(roll_sums, N)
	% Calculate probability from simulation
	prob(:) = 100*roll_sums(:)/N;
        
	% Display bar graphs of roll total results, and probabilities.
	subplot(2,1,1); bar(roll_sums);
	title('Dice Simulation'); xlabel('Roll Total'); ylabel('# Times Rolled');
	grid on
	subplot(2,1,2); bar(prob);
	xlabel('Roll Total'); ylabel('% Probability');
	grid on
end

MATLAB OUTPUT:
>>rolldice('true',6,2,10);

Player rolls a 2 and a 6 : 8
Player rolls a 6 and a 2 : 8
Player rolls a 6 and a 3 : 9
Player rolls a 2 and a 4 : 6
Player rolls a 1 and a 4 : 5
Player rolls a 1 and a 1 : snake eyes
Player rolls a 1 and a 5 : 6
Player rolls a 2 and a 5 : natural
Player rolls a 3 and a 4 : natural
Player rolls a 5 and a 3 : 8

>>rolldice('false',6,2,1*10^5);

diceprob.jpg


QUESTION 2: CHAPTER 7 -- #13
MATLAB CODE:
function vout=clipVec( v , vmin , vmax )
    %clipVec copies vector v to vout, but 'clips' values between
    %vmin and vmax.
    
    for i=1:length(v)
        if v(i)>vmax
            vout(i)=vmax;
        elseif v(i)<vmin
            vout(i)=vmin;
        else
            vout(i)=v(i);
        end
    end
end

MATLAB OUTPUT:
>>x=linspace(0, 3, 300);
y=sin(2*pi*x);
plot(x,clipVec(y, -0.9, 0.9));
axis([0, 3, -1, 1]);

clipVec.jpg

QUESTION 3a: TrapizoidRule
MATLAB CODE:
TrapizoidRule.m
function [vargout] = TrapizoidRule(X,fun,n)
    %trap takes function handle fun, and n steps over X to estimate the
    %integrand of fun over all X using the trapezoid metod.
    Xlen = length(X);
    range = X(Xlen)-X(1);
    step = range/n;
    
    % Create a corresponding Y space to match with X
    Y = fun(X);
    
    % Initialize variables for first pass through loop.
    raw = 0;
    a = X(1);
    fa = fun(a);
	
	% Transparent trapezoid estimation using for loop
    for i=1:n
       b = a + step;
       fb = fun(b);
       
       raw = raw + 0.5*(b-a)*(fb+fa);
       if i<n
           a = b;
           fa = fb;
       end
    end
    
    % Use trapz(X,Y) as reference to 'raw' estimate
    estimated = trapz(X,Y);
    error = abs((raw-estimated)/estimated)*100;
    
    % Aggregate values for 'raw', 'estimated', and 'error' into vargout.
    vargout=[raw, estimated, error];
    
    % Plot function
    figure; plot(X,Y); title('Y = f(x)'),xlabel('X'); ylabel('Y');
end

MATLAB OUTPUT: (NOTE: output is my raw calculation, the trapz() output, and the %error between the two.)
>>X = -2:6/100:4; fun = @(x) 1-x-4*x.^3 + 2*x.^5;
>> n=1; [result1] = TrapizoidRule(X,fun,n);

The raw calculation found the integral to be 5280.000000.
The trapz() estimate was 1104.676774.
And the percent error between the two is 377.967866.

>> n=2; [result2] = TrapizoidRule(X,fun,n);

The raw calculation found the integral to be 2634.000000.
The trapz() estimate was 1104.676774.
And the percent error between the two is 138.440788.

>> n=4; [result4] = TrapizoidRule(X,fun,n);

The raw calculation found the integral to be 1516.875000.
The trapz() estimate was 1104.676774.
And the percent error between the two is 37.313922.

trap.jpg

QUESTION 3b: SimpsonRule
MATLAB CODE:
SimpsonRule.m
Write a function called SimpsonRule (3/8 rule) and implement the integration for

>>X = -2:6/100:4; fun = @(x) 1-x-4*x.^3 + 2*x.^5;
>>results=SimpsonRule(0,1,X,fun,1);
Cannot compute simpson 1/3 or 3/8 with n<2


>>results=SimpsonRule(0,1,X,fun,2);
Cannot compute simpson 3/8 with n<3, calculating for 1/3

Using Simpsons 1/3, the integral was estimated to be 1752.000000.
The function trapz() found the real value of the integral to be 1104.676774;
	...implying a -58.598428% error.
And function simps(), a function from Daimen Garcia on mathworks file exchange, finds the real value of the integral to be 1104.000104;
	...implying a -58.695637% error.


>>results=SimpsonRule(0,1,X,fun,4);
Using Simpsons 3/8, the integral was estimated to be 1137.621094.
The function trapz() found the real value of the integral to be 1104.676774;
	...implying a -2.982259% error.
And function simps(), a function from Daimen Garcia on mathworks file exchange, finds the real value of the integral to be 1104.000104;
	...implying a -3.045379% error.
	

#QUESTION 4
>> t=[1,2,3.25,4.5,6,7,8,8.5,9.3,10];
>> v=[5,6,5.5,7,8.5,8,6,7,7,5];
