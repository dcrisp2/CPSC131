//AUTHOR:		DANIEL CRISP
//DATE:			SATURDAY, NOVEMBER 26th, 2016
//DESC:			GRAPHICS

#QUESTION 7:	Meshgrid Command
Write a meshgrid command to create the grid below with the
following coordination: the left and right lower- nodes are (1,
10) and (1,15) respectively, while the left and right upper -
nodes are (6,10) and (6, 15). Draw the out put as mesh plot and
show the output of the meshgrid command

MATLAB CODE:
function [ X , Y ] = meshcmd( LowPoint , HighPoint , Points )
    n = Points; %number of points
    %F = Function;
    low = LowPoint; %[1 10]
    high = HighPoint; %[6 15]
    length = high - low;
    
    x = linspace(low(1),length(1),n);
    y = linspace(low(2),length(2),n);
    
    [X,Y] = meshgrid(x,y);
    F = input('\nEnter a Z(n,n) matrix for use in surf plot X-Y.\n');
    %F = X.*exp(-X.^2-Y.^2);
    %F = zeros(n,n); %zeros of matrix n x n
    
    surf(X,Y,F);
end

MATLAB OUTPUT:
>>[S] = meshcmd([1 10],[6 15], 6 );
meshgrid_cmd.jpg



#QUESTION 8:	Polygon Rotation
Rotate a polygon ABCD a quarter, half, full and 5 cycles
around the origin if A( 0,0), B(4, 1), C(2, -4), D(-1, -3).

MATLAB CODE:
function rotate( Origin, Points, Degrees )
    %Rotate a given set of points entered as [p1;p2;p3] about the origin
    %using a linspace in degrees.
    
    %Convert vargins to more useful names
    o = Origin; %[0 0];
    pts = Points;
    deg = Degrees;
    
    %Set pts about origin, get magnitudes, close line by appending first
    %point to end of pts
    [lim,pts] = relate_inputs(o,pts);
    
    %Draw Lines
    plotline(pts);
    axis([-lim+o(1) lim+o(1) -lim+o(2) lim+o(2)]);
    Npts = length(pts(:,1));
    for theta = deg
        R = [cos(theta) -sin(theta);sin(theta) cos(theta)]; %2D Rotation matrix
        pts_new=R*pts(1:Npts,:)'; %Rotate points
        plotline(pts_new'); %Send pts_new to plotline as [pt1;pt2..]
    end
end

function plotline(pts)
    dim = length(pts(1,:));

    x = pts(:,1);
    switch dim
        case 2
            y = pts(:,2);
            line('XData',x,'YData',y);
        case 3 %IGNORE: havn't yet included 3D rotation matrix
            z = pts(:,2);
            line('XData',x,'YData',y,'ZData',z);
    end
end

function [lim,pts] = relate_inputs(o, pts)
    
    Npts = length(pts(:,1));
    r(1:Npts) = 0;
    for i = 1:Npts
        pts(i,:) = pts(i,:)-o(1,:);  %Shift points for rotation about origin
        r(i) = sqrt(sum(pts(i,:).^2));
    end
    pts(Npts+1,:)=pts(1,:);  %Close image by appending pts with duplicate of first.
    lim = max(r);
end


MATLAB OUTPUT:
>>polyPoints = [0 0; 4 1; 2 -4; -1 -3]; full = 2*pi;
>>rotate([0 0],polypts,[0 0.25*full 0.5*full full 5*full])

rotatePoly.jpg



#QUESTION 9:	Quiver Function
What is quiver function? Create a meshgrid for a vector [-3,3],
then compute the vector field R (include both Rx and Ry). Plot
the quiver image if the velocity of the position vector (V) = |R|.
sin(Ð¤). Make any necessary assumptions. Read page 243-245 of
the text book for more explanation (attached below).




#QUESTION 10:	Dumbell Rotation
Using dumbbell program, rotate three spheres connected as
triangle. Make any necessary assumption.


